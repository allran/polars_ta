# generated by codegen_talib.py
import polars as pl

from polars_ta.utils.helper import TaLibHelper

_ = TaLibHelper


def HT_DCPERIOD(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_DCPERIOD(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def HT_DCPHASE(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_DCPHASE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def HT_PHASOR(close: pl.Expr, skip_nan=False, output_idx=None, schema=('inphase', 'quadrature'), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_PHASOR(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def HT_SINE(close: pl.Expr, skip_nan=False, output_idx=None, schema=('sine', 'leadsine'), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_SINE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def HT_TRENDMODE(close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_TRENDMODE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ADD(high: pl.Expr, low: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.ADD(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def DIV(high: pl.Expr, low: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.DIV(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MAX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.MAX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MAXINDEX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return (close).ta.MAXINDEX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MIN(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.MIN(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MININDEX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return (close).ta.MININDEX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MINMAX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('min', 'max'), schema_format='{}') -> pl.Expr:
    return (close).ta.MINMAX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MINMAXINDEX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('minidx', 'maxidx'), schema_format='{}') -> pl.Expr:
    return (close).ta.MINMAXINDEX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MULT(high: pl.Expr, low: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.MULT(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SUB(high: pl.Expr, low: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.SUB(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SUM(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.SUM(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ACOS(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ACOS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ASIN(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ASIN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ATAN(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ATAN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CEIL(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.CEIL(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def COS(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.COS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def COSH(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.COSH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def EXP(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.EXP(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def FLOOR(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.FLOOR(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LN(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LOG10(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LOG10(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SIN(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.SIN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SINH(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.SINH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SQRT(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.SQRT(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TAN(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TAN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TANH(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TANH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ADX(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.ADX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ADXR(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.ADXR(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def APO(close: pl.Expr, fastperiod: int = 12, slowperiod: int = 26, matype: int = 0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.APO(fastperiod, slowperiod, matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def AROON(high: pl.Expr, low: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('aroondown', 'aroonup'), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.AROON(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def AROONOSC(high: pl.Expr, low: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.AROONOSC(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def BOP(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.BOP(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CCI(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.CCI(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CMO(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.CMO(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def DX(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.DX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MACD(close: pl.Expr, fastperiod: int = 12, slowperiod: int = 26, signalperiod: int = 9, skip_nan=False, output_idx=None, schema=('macd', 'macdsignal', 'macdhist'), schema_format='{}') -> pl.Expr:
    return (close).ta.MACD(fastperiod, slowperiod, signalperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MACDEXT(close: pl.Expr, fastperiod: int = 12, fastmatype: int = 0, slowperiod: int = 26, slowmatype: int = 0, signalperiod: int = 9, signalmatype: int = 0, skip_nan=False, output_idx=None, schema=('macd', 'macdsignal', 'macdhist'), schema_format='{}') -> pl.Expr:
    return (close).ta.MACDEXT(fastperiod, fastmatype, slowperiod, slowmatype, signalperiod, signalmatype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MACDFIX(close: pl.Expr, signalperiod: int = 9, skip_nan=False, output_idx=None, schema=('macd', 'macdsignal', 'macdhist'), schema_format='{}') -> pl.Expr:
    return (close).ta.MACDFIX(signalperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MFI(high: pl.Expr, low: pl.Expr, close: pl.Expr, volume: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close, volume).ta.MFI(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MINUS_DI(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.MINUS_DI(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MINUS_DM(high: pl.Expr, low: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.MINUS_DM(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MOM(close: pl.Expr, timeperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.MOM(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def PLUS_DI(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.PLUS_DI(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def PLUS_DM(high: pl.Expr, low: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.PLUS_DM(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def PPO(close: pl.Expr, fastperiod: int = 12, slowperiod: int = 26, matype: int = 0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.PPO(fastperiod, slowperiod, matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ROC(close: pl.Expr, timeperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ROC(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ROCP(close: pl.Expr, timeperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ROCP(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ROCR(close: pl.Expr, timeperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ROCR(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ROCR100(close: pl.Expr, timeperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.ROCR100(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def RSI(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.RSI(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def STOCH(high: pl.Expr, low: pl.Expr, close: pl.Expr, fastk_period: int = 5, slowk_period: int = 3, slowk_matype: int = 0, slowd_period: int = 3, slowd_matype: int = 0, skip_nan=False, output_idx=None, schema=('slowk', 'slowd'), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.STOCH(fastk_period, slowk_period, slowk_matype, slowd_period, slowd_matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def STOCHF(high: pl.Expr, low: pl.Expr, close: pl.Expr, fastk_period: int = 5, fastd_period: int = 3, fastd_matype: int = 0, skip_nan=False, output_idx=None, schema=('fastk', 'fastd'), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.STOCHF(fastk_period, fastd_period, fastd_matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def STOCHRSI(close: pl.Expr, timeperiod: int = 14, fastk_period: int = 5, fastd_period: int = 3, fastd_matype: int = 0, skip_nan=False, output_idx=None, schema=('fastk', 'fastd'), schema_format='{}') -> pl.Expr:
    return (close).ta.STOCHRSI(timeperiod, fastk_period, fastd_period, fastd_matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TRIX(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TRIX(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ULTOSC(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod1: int = 7, timeperiod2: int = 14, timeperiod3: int = 28, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.ULTOSC(timeperiod1, timeperiod2, timeperiod3, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def WILLR(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.WILLR(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def BBANDS(close: pl.Expr, timeperiod: int = 5, nbdevup: float = 2.0, nbdevdn: float = 2.0, matype: int = 0, skip_nan=False, output_idx=None, schema=('upperband', 'middleband', 'lowerband'), schema_format='{}') -> pl.Expr:
    return (close).ta.BBANDS(timeperiod, nbdevup, nbdevdn, matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def DEMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.DEMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def EMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.EMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def HT_TRENDLINE(close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.HT_TRENDLINE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def KAMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.KAMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MA(close: pl.Expr, timeperiod: int = 30, matype: int = 0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.MA(timeperiod, matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MAMA(close: pl.Expr, fastlimit: float = 0.5, slowlimit: float = 0.05, skip_nan=False, output_idx=None, schema=('mama', 'fama'), schema_format='{}') -> pl.Expr:
    return (close).ta.MAMA(fastlimit, slowlimit, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MAVP(close: pl.Expr, periods: pl.Expr, minperiod: int = 2, maxperiod: int = 30, matype: int = 0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(close, periods).ta.MAVP(minperiod, maxperiod, matype, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MIDPOINT(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.MIDPOINT(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MIDPRICE(high: pl.Expr, low: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.MIDPRICE(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SAR(high: pl.Expr, low: pl.Expr, acceleration: float = 0.02, maximum: float = 0.2, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.SAR(acceleration, maximum, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SAREXT(high: pl.Expr, low: pl.Expr, startvalue: float = 0.0, offsetonreverse: float = 0.0, accelerationinitlong: float = 0.02, accelerationlong: float = 0.02, accelerationmaxlong: float = 0.2, accelerationinitshort: float = 0.02, accelerationshort: float = 0.02, accelerationmaxshort: float = 0.2, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.SAREXT(startvalue, offsetonreverse, accelerationinitlong, accelerationlong, accelerationmaxlong, accelerationinitshort, accelerationshort, accelerationmaxshort, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def SMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.SMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def T3(close: pl.Expr, timeperiod: int = 5, vfactor: float = 0.7, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.T3(timeperiod, vfactor, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TEMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TEMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TRIMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TRIMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def WMA(close: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.WMA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL2CROWS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL2CROWS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3BLACKCROWS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3BLACKCROWS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3INSIDE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3INSIDE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3LINESTRIKE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3LINESTRIKE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3OUTSIDE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3OUTSIDE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3STARSINSOUTH(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3STARSINSOUTH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDL3WHITESOLDIERS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDL3WHITESOLDIERS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLABANDONEDBABY(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.3, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLABANDONEDBABY(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLADVANCEBLOCK(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLADVANCEBLOCK(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLBELTHOLD(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLBELTHOLD(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLBREAKAWAY(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLBREAKAWAY(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLCLOSINGMARUBOZU(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLCLOSINGMARUBOZU(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLCONCEALBABYSWALL(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLCONCEALBABYSWALL(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLCOUNTERATTACK(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLCOUNTERATTACK(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLDARKCLOUDCOVER(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.5, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLDARKCLOUDCOVER(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLDOJI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLDOJI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLDOJISTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLDOJISTAR(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLDRAGONFLYDOJI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLDRAGONFLYDOJI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLENGULFING(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLENGULFING(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLEVENINGDOJISTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.3, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLEVENINGDOJISTAR(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLEVENINGSTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.3, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLEVENINGSTAR(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLGAPSIDESIDEWHITE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLGAPSIDESIDEWHITE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLGRAVESTONEDOJI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLGRAVESTONEDOJI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHAMMER(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHAMMER(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHANGINGMAN(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHANGINGMAN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHARAMI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHARAMI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHARAMICROSS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHARAMICROSS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHIGHWAVE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHIGHWAVE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHIKKAKE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHIKKAKE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHIKKAKEMOD(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHIKKAKEMOD(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLHOMINGPIGEON(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLHOMINGPIGEON(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLIDENTICAL3CROWS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLIDENTICAL3CROWS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLINNECK(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLINNECK(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLINVERTEDHAMMER(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLINVERTEDHAMMER(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLKICKING(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLKICKING(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLKICKINGBYLENGTH(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLKICKINGBYLENGTH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLLADDERBOTTOM(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLLADDERBOTTOM(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLLONGLEGGEDDOJI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLLONGLEGGEDDOJI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLLONGLINE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLLONGLINE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLMARUBOZU(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLMARUBOZU(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLMATCHINGLOW(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLMATCHINGLOW(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLMATHOLD(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.5, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLMATHOLD(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLMORNINGDOJISTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.3, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLMORNINGDOJISTAR(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLMORNINGSTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, penetration: float = 0.3, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLMORNINGSTAR(penetration, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLONNECK(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLONNECK(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLPIERCING(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLPIERCING(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLRICKSHAWMAN(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLRICKSHAWMAN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLRISEFALL3METHODS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLRISEFALL3METHODS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSEPARATINGLINES(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSEPARATINGLINES(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSHOOTINGSTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSHOOTINGSTAR(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSHORTLINE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSHORTLINE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSPINNINGTOP(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSPINNINGTOP(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSTALLEDPATTERN(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSTALLEDPATTERN(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLSTICKSANDWICH(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLSTICKSANDWICH(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLTAKURI(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLTAKURI(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLTASUKIGAP(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLTASUKIGAP(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLTHRUSTING(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLTHRUSTING(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLTRISTAR(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLTRISTAR(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLUNIQUE3RIVER(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLUNIQUE3RIVER(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLUPSIDEGAP2CROWS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLUPSIDEGAP2CROWS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CDLXSIDEGAP3METHODS(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('integer',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.CDLXSIDEGAP3METHODS(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def AVGPRICE(open: pl.Expr, high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(open, high, low, close).ta.AVGPRICE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def MEDPRICE(high: pl.Expr, low: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.MEDPRICE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TYPPRICE(high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.TYPPRICE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def WCLPRICE(high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.WCLPRICE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def BETA(high: pl.Expr, low: pl.Expr, timeperiod: int = 5, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.BETA(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def CORREL(high: pl.Expr, low: pl.Expr, timeperiod: int = 30, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low).ta.CORREL(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LINEARREG(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LINEARREG(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LINEARREG_ANGLE(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LINEARREG_ANGLE(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LINEARREG_INTERCEPT(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LINEARREG_INTERCEPT(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def LINEARREG_SLOPE(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.LINEARREG_SLOPE(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def STDDEV(close: pl.Expr, timeperiod: int = 5, nbdev: float = 1.0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.STDDEV(timeperiod, nbdev, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TSF(close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.TSF(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def VAR(close: pl.Expr, timeperiod: int = 5, nbdev: float = 1.0, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return (close).ta.VAR(timeperiod, nbdev, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ATR(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.ATR(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def NATR(high: pl.Expr, low: pl.Expr, close: pl.Expr, timeperiod: int = 14, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.NATR(timeperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def TRANGE(high: pl.Expr, low: pl.Expr, close: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close).ta.TRANGE(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def AD(high: pl.Expr, low: pl.Expr, close: pl.Expr, volume: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close, volume).ta.AD(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def ADOSC(high: pl.Expr, low: pl.Expr, close: pl.Expr, volume: pl.Expr, fastperiod: int = 3, slowperiod: int = 10, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(high, low, close, volume).ta.ADOSC(fastperiod, slowperiod, skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)


def OBV(close: pl.Expr, volume: pl.Expr, skip_nan=False, output_idx=None, schema=('real',), schema_format='{}') -> pl.Expr:
    return pl.struct(close, volume).ta.OBV(skip_nan=skip_nan, output_idx=output_idx, schema=schema, schema_format=schema_format)

